{"version":3,"sources":["componenets/jumbotron.js","componenets/search.js","componenets/tablerow.js","componenets/table.js","utils/api.js","componenets/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","handleInputChange","filterUsers","users","input","Jumbotron","Row","Col","Form","Control","type","placeholder","value","name","onChange","Button","onClick","Search","TableRow","email","phone","thumbnail","src","UserTable","usersDisplayed","Table","striped","bordered","hover","map","user","picture","first","last","axios","require","get","TableContainer","state","isFiltered","filteredUsers","event","target","setState","filter","toLowerCase","console","log","this","getUserData","API","userResp","prevState","data","results","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a2d9231.chunk.js","sourcesContent":["import React from 'react'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\n\nexport default function SearchBar ({handleInputChange, filterUsers, users, input}){\nreturn (\n<Jumbotron>\n    <Row>\n    <Col>\n    <Form.Control type=\"text\"\n        placeholder=\"Search by Name\"\n        value={input}\n        name=\"input\"\n        onChange={handleInputChange} />\n    </Col>\n    <Col>\n    <Button onClick={() => filterUsers(input, users)}>Search</Button>\n    </Col>\n    </Row>\n</Jumbotron>\n)\n}","import React from \"react\";\nimport SearchBar from \"./jumbotron\";\n\nexport default  function Search ({handleInputChange, filterUsers, users, input}) {\n        return(\n            <SearchBar  users={users} handleInputChange={handleInputChange} filterUsers={filterUsers} input={input} />\n        )\n}","import React from 'react'\n\nexport default function  TableRow({email, phone, thumbnail, name}) {\n    return(\n        <tr>\n            <td><img src={thumbnail}></img></td>\n            <td>{name}</td>\n            <td>{email}</td>\n            <td>{phone}</td>\n        </tr>\n    )\n}","import React from 'react'\nimport { Table } from \"react-bootstrap\"\nimport TableRow from \"./tablerow\"\n\n\n\nexport default function UserTable({usersDisplayed}) {\n    return (\n            <div>\n                \n                <Table striped bordered hover >\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th>Name</th>\n                            <th>Email</th>\n                            <th>Phone</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {usersDisplayed.map(user => (\n                            <TableRow thumbnail={user.picture.thumbnail} email={user.email} phone={user.phone} name={user.name.first + \" \" + user.name.last} />\n                        ))}\n                    </tbody>\n                </Table>\n            </div>\n    )\n}","const axios = require ('axios')\n\nexport default {\n    getUsers: function() {\n      return axios.get(\"https://randomuser.me/api/?results=15&nat=us\");\n    }\n};","import React, { Component } from 'react';\nimport Search from './search'\nimport UserTable from './table'\nimport API from '../utils/api';\n\nexport default class TableContainer extends Component {\n    state = {\n        users: [],\n        isFiltered: false,\n        filteredUsers: [],\n        input: \"\"\n    }\n\n    handleInputChange = event => {\n        const { value } = event.target;\n        this.setState({\n            input: value,\n            isFiltered:false\n        })\n    }\n\n    filterUsers = (input, users) => {\n        let filter = users.filter(user => user.name.first.toLowerCase() === input.toLowerCase())\n        this.setState({\n            input: \"\",\n            isFiltered: true,\n            filteredUsers: filter\n        })\n        console.log(this.state)\n    }\n\n    componentDidMount() {\n        this.getUserData()\n    }\n\n    async getUserData() {\n        try {\n            const userResp = await API.getUsers()\n            this.setState(prevState => { return { ...prevState, users: userResp.data.results } })\n            console.log(userResp.data.results)\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n        render(){\n           if(this.state.isFiltered === false){\n               return (\n                   <div>\n                       <Search  users={this.state.users} filterUsers={this.filterUsers} handleInputChange={this.handleInputChange} input={this.state.input}/>\n                       <UserTable usersDisplayed={this.state.users}/>\n                   </div>\n               )\n           }\n           else if(this.state.isFiltered === true ) {\n            return (\n                <div>\n                    <Search  users={this.state.users} filterUsers={this.filterUsers} handleInputChange={this.handleInputChange} input={this.state.input}/>\n                    <UserTable usersDisplayed={this.state.filteredUsers}/>\n                </div>\n            )\n           }\n        }\n    }","import React from 'react';\nimport TableContainer from './componenets/TableContainer'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TableContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}